{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","App.js","index.js"],"names":["Title","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","console","log","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","useFireStore","map","key","layout","whileHover","opacity","onClick","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe4bb18b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>My Pictures</h2>\n      <p>A glimpse into my life</p>\n    </div>\n  )\n}\n\nexport default Title;","\r\n// first, need to install firebase on frontend via npm install firebase.\r\n\r\nimport * as firebase from 'firebase/app';\r\nimport 'firebase/storage'; // importing storage sdk to store our images\r\nimport 'firebase/firestore'; // our database\r\n\r\n//these are the two services we are gonna be using \r\n\r\n// Your web app's Firebase configuration - this is the info that our project uses to initialise our firebase app and connect to the backend \r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyApnTFNP0Ybrv9xc4TgeJIDZBQhPqA4NHk\",\r\n    authDomain: \"firegram-29f2c.firebaseapp.com\",\r\n    databaseURL: \"https://firegram-29f2c.firebaseio.com\",\r\n    projectId: \"firegram-29f2c\",\r\n    storageBucket: \"firegram-29f2c.appspot.com\",\r\n    messagingSenderId: \"108338941759\",\r\n    appId: \"1:108338941759:web:f7626f940a901001560d8a\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n// Initialise Storage Service\r\nconst projectStorage = firebase.storage();\r\n// Initialise Firestore Service\r\nconst projectFirestore = firebase.firestore();\r\n\r\n// firebase server timestamp - a special type of data that firestore uses\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {projectStorage, projectFirestore, timestamp};\r\n\r\n// we need to initalise these 2 services on our project dashboard.","import {useState, useEffect} from 'react';\r\n\r\nimport {projectStorage, projectFirestore,timestamp} from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n    //3 pieces of state to be used.\r\n    const [progress,setProgress] = useState(0);\r\n    const [error,setError] = useState(null);\r\n    const [url,setUrl] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        // references\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n\r\n        storageRef.put(file).on('state_changed',(snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n\r\n            // whenever the state aka progress changes this inner function gets fired.\r\n        }, (err) =>{\r\n            setError(err) // this fires when theres an error with the upload.\r\n        },async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({url, createdAt}) // adding two properties, 2 url and a timestamp.\r\n            setUrl(url) // this runs after the image has been uploaded.\r\n        });\r\n\r\n\r\n    }, [file]);//this useEffect fires whenever its dependency, file, changes\r\n\r\n    return {progress, url, error}\r\n\r\n\r\n} \r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport {motion} from 'framer-motion';\r\n\r\nconst ProgressBar = ({file, setFile}) => {\r\n    const {url, progress} = useStorage(file);\r\n    \r\n    useEffect(() =>{\r\n        if (url){\r\n            setFile(null);\r\n        }\r\n    }, [url,setFile])\r\n// have to add setfile as a depency as well since we are using it inside the function \r\n// so basically when url changes, use effect fires, and it will cause setfile to set file to null\r\n\r\n\r\n    return (\r\n        <motion.div className=\"progress-bar\" \r\n        initial = {{width:0}}\r\n        animate={{width:progress + '%'}}\r\n        ></motion.div>\r\n    )\r\n}\r\n\r\n// animating the progressbar using framer motion, in order to make it less jumpy.\r\n\r\nexport default ProgressBar;\r\n\r\n","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => { \r\n    const [file , setFile] = useState(null);\r\n    const [error,setError] = useState(null);\r\n    const types = ['image/png','image/jpeg']; // allowed types. to prevent ppl from uploading videos \r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n        console.log(selected)\r\n        // if we actually have a file.. and that file is a png/jpeg..\r\n        if (selected && types.includes(selected.type)){\r\n            setFile(selected); \r\n            setError('');\r\n        } else{\r\n            setFile(null);\r\n            setError('Please select an image file (png or jpeg)');\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <label>\r\n                <input type = \"file\" onChange={changeHandler} />\r\n                <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                {error && <div className = \"error\">{error}</div>} \r\n                {file && <div>{file.name}</div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n// if theres a error, div w class error will be shown.\r\n// file name will awlways be shown.\r\n// the right side of double enpercent && will only be rendered if the left side is present\r\nexport default UploadForm;","import {useState , useEffect} from 'react';\r\n\r\nimport {projectFirestore} from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n        .orderBy('createdAt','desc') // order the documents in date order,desc order, before we retrieve them\r\n        .onSnapshot((snap) => { // fires once, and every time a new doc added, then again it runs this and gets a snapshot of all the docs\r\n            let documents = [];\r\n            snap.forEach(doc => {\r\n                documents.push({...doc.data(), id : doc.id})\r\n                // using spread operator to get all the properties of the data and spreads those into properties of the obj. and id as well.\r\n            });\r\n            setDocs(documents);\r\n        }); // after the whole thing runs, it returns a function and that function is used to unsub from the collection\r\n        // hence we can invoke this function for instance when we UNMOUNT this imagegrid component. \r\n        // every time theres a change, or when we uplaod an img, onSnapshot eventhandler will fire and updates the docs\r\n        return () => unsub();\r\n\r\n    },[collection])\r\n\r\n    return {docs};   \r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFireStore from '../hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({setSelectedImg}) => {\r\n    const {docs} = useFireStore('images');\r\n    console.log(docs)\r\n    return (\r\n        <div className=\"img-grid\">\r\n            {docs && docs.map(doc => (\r\n                <motion.div className = \"img-wrap\" key = {doc.id} \r\n                layout\r\n                whileHover={{opacity:1}}\r\n                onClick={() => setSelectedImg(doc.url)}>\r\n                    <motion.img src={doc.url} alt=\"uploaded pic\" \r\n                        initial={{opacity:0}}\r\n                        animate={{opacity:1}}\r\n                        transition={{delay:1}}\r\n                    />\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;\r\n\r\n// to create a motion element, npm install framer-motion, import it, then later use motion.div to turn a div into a motion element.\r\n","import React from 'react';\r\nimport {motion} from 'framer-motion';\r\n\r\n\r\nconst Modal = ({selectedImg, setSelectedImg }) => {\r\n\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains(\"backdrop\")){\r\n            // the e.target is impt so as to prevent us fromn closing Modal when we click on the pic.\r\n            // we only want to close the modal if we click the BACKDROP!\r\n            setSelectedImg(null);\r\n// when this occurs, modal is closed. as modal only is rendered when selectedImg has a value.\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n        initial = {{opacity:0}} animate={{opacity:1}}\r\n        >\r\n            <motion.img src = {selectedImg} alt=\"enlarged pic\" \r\n                initial = {{y: \"-100vh\"}}\r\n                animate={{y:0}}\r\n            />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\n\r\nexport default Modal;","import React,{useState} from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\n\nfunction App() {\n\n  const [selectedImg,setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg = {setSelectedImg}/>\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n\n// so only if selectedImg has a value, then Modal component is rendered.","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}